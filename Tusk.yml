tasks:
  lints:
    usage: runs lints
    run:
      exec: |
        bash -ceu '
        function run_and_expect_silence() {
          echo "$@"
          result_file=$(mktemp -t bouldertestXXXX)
          "$@" 2>&1 | tee "${result_file}"

          # Fail if result_file is nonempty.
          if [ -s "${result_file}" ]; then
            rm "${result_file}"
            exit 1
          fi
          rm "${result_file}"
        }
        run_and_expect_silence golangci-lint run --timeout 9m ./...
        python3 test/grafana/lint.py
        codespell \
          --ignore-words=.codespell.ignore.txt \
          --skip=.git,.gocache,go.sum,go.mod,vendor,bin,*.pyc,*.pem,*.der,*.resp,*.req,*.csr,.codespell.ignore.txt,.*.swp'
      print: Running lints...

  unit:
    usage: runs go unit tests
    options:
      race:
        short: e
        usage: enable race detection
        type: bool
      verbose:
        short: v
        usage: enable verbose output
        type: bool
      package:
        short: p
        usage: path to a specific package
        default: ./...
      filter:
        short: f
        usage: regex that tests must match
    run:
      - when: [equal: { race: true }, equal: { verbose: false }, equal: { filter: "" }]
        command: go test -race -p 1 ${package}
      - when: [equal: { race: false }, equal: { verbose: false }, equal: { filter: "" }]
        command: go test -p 1 ${package}
      - when: [equal: { race: true }, equal: { verbose: true }, equal: { filter: "" }]
        command: go test -v -race -p 1 ${package}
      - when: [equal: { race: false }, equal: { verbose: true }, equal: { filter: "" }]
        command: go test -v -p 1 ${package}
      - when: [equal: { race: true }, equal: { verbose: false }, not-equal: { filter: "" }]
        command: go test -race -p 1 ${package} --test.run ${filter}
      - when: [equal: { race: false }, equal: { verbose: false }, not-equal: { filter: "" }]
        command: go test -p 1 ${package} --test.run ${filter}
      - when: [equal: { race: true }, equal: { verbose: true }, not-equal: { filter: "" }]
        command: go test -v -race -p 1 ${package} --test.run ${filter}
      - when: [equal: { race: false }, equal: { verbose: true }, not-equal: { filter: "" }]
        command: go test -v -p 1 ${package} --test.run ${filter}

  integration:
    usage: runs integration tests
    options:
      filter:
        short: f
        usage: regex that tests must match
    run:
      - when: [equal: { filter: "" }]
        command: python3 test/integration-test.py --chisel --gotest
      - when: [not-equal: { filter: "" }]
        command: python3 test/integration-test.py --chisel --gotest --filter ${FILTER}}

  start-py:
    usage: runs ./start.py
    run:
      - exec: |
          bash -ceu '
          python3 start.py &
          for I in $(seq 1 100); do
            sleep 1
            curl -s http://localhost:4000/directory && break
          done
          if [[ "$I" = 100 ]]; then
            echo "Boulder did not come up after ./start.py."
            exit 1
          fi'
        print: Running ./start.py...

  make-artifacts:
    usage: runs ./start.py
    run:
      command: make deb rpm

  generate:
    usage: run generate
    run:
      - exec: |
          bash -ceu '
          function run_and_expect_silence() {
            echo "$@"
            result_file=$(mktemp -t bouldertestXXXX)
            "$@" 2>&1 | tee "${result_file}"

            # Fail if result_file is nonempty.
            if [ -s "${result_file}" ]; then
              rm "${result_file}"
              exit 1
            fi
            rm "${result_file}"
          }
        
          go install ./probs
          go install ./vendor/google.golang.org/grpc/codes
          run_and_expect_silence go generate ./...
          run_and_expect_silence git diff --exit-code .'
        print: Running generate...
